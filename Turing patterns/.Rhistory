plot(seq_along(k), k[ord], type = "b", pch = 19,
xlab = "Rank (high → low)", ylab = "Degree")
library(igraph)
library(Matrix)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
set.seed(8)
N = 200
m = 5
g <- sample_pa(n = N, m = m, directed = FALSE)
A <- as.matrix(as_adjacency_matrix(g, sparse = FALSE))
#print(A)
D <- diag(degree(g))
#print(D)
L <- A - D
#print(L)
plot(g, vertex.size = 5, edge.arrow.size = 0, vertex.label = NA)
ev <- eigen(as.matrix(L), symmetric = TRUE)
Lambda_vals <- ev$values
Phi_vals <- ev$vectors
lambda = function(Lambda, fu, gv, fv, gu, sigma, eps,
complex_ok = TRUE, tol = 1e-12) {
A    <- fu + gv + (1 + sigma) * eps * Lambda
disc <- 4*fv*gu + (fu - gv + (1 - sigma) * eps * Lambda)^2
B <- if (complex_ok) sqrt(as.complex(disc)) else sqrt(pmax(disc, 0))
0.5 * (A + B)
}
fu = 3.33
fv = -5
gu = 10
gv = -4
fu = 3.33
fv = -5
gu = 10
gv = -4
sigma_c <- function(fu, gv, fv, gu) {
disc <- fv*gu * (fv*gu - fu*gv)
(fu*gv - 2*fv*gu + 2*sqrt(disc)) / (fu^2)
}
sigma_c_val <- sigma_c(fu, gv, fv, gu)
sigma_c_val
modes_vals <- lambda(Lambda_vals, fu, gv, fv, gu, 15.6, 0.12)
Lambda_seq = seq(min(Lambda_vals), -0.0001, length.out = 10000)
y_curve <- Re(lambda(Lambda_seq, fu, gv, fv, gu, 15.5, 0.425))
plot(log(-Lambda_seq), y_curve, type="l", xlab="Λ", ylab="Re λ+"); abline(h=0, lty=2)
which.max(Re(lambda(Lambda_vals, fu, gv, fv, gu, sigma = 15.5, eps = 0.425)))
color_by_phi <- function(phi_ac, t = 0.1) {
cols <- ifelse(phi_ac >= t, "red",
ifelse(phi_ac <= -t, "blue", "yellow"))
cols
}
cols <- color_by_phi(Phi_vals[, 15])
color_by_phi <- function(phi_ac, t = 0.1) {
cols <- ifelse(phi_ac >= t, "red",
ifelse(phi_ac <= -t, "blue", "yellow"))
cols
}
cols <- color_by_phi(Phi_vals[, 15])
t <- 0.1
phi <- Phi_vals[, 15]
cls <- cut(phi, breaks = c(-Inf, -t, t, Inf),
labels = c("≤ -0.1", "(-0.1, 0.1)", "≥ 0.1"))
df <- data.frame(node = seq_along(phi), phi = phi, cls = cls)
ggplot(df, aes(node, phi, color = cls)) +
geom_point(size = 2) +
geom_hline(yintercept = c(-t, t), linetype = "dashed") +
scale_color_manual(values = c("≤ -0.1" = "blue",
"(-0.1, 0.1)" = "yellow",
"≥ 0.1" = "red"),
na.value = "grey80") +
theme_minimal()
V(g)$color <- color_by_phi(phi, t = 0.1)
plot(g, vertex.color = V(g)$color, vertex.size = 6, edge.arrow.mode = 0, vertex.label= NA)
a <- 35; b <- 16; c <- 9; d <- 2/5
f  <- function(u, v) ((a + b*u - u*u)/c - v) * u
gF <- function(u, v) (u - (1 + d*v)) * v
eps   <- 0.12
sigma <- 15.6
set.seed(8)
u <- rep(5, N) + 1e-2*runif(N)
v <- rep(10, N) + 1e-2*runif(N)
steps <- 200
dt    <- 0.005
U <- matrix(NA_real_, nrow = steps+1, ncol = N); U[1,] <- u
V <- matrix(NA_real_, nrow = steps+1, ncol = N); V[1,] <- v
for (t in 1:steps) {
du <- f(u, v) + eps   * (L %*% u)
dv <- gF(u, v) + sigma*eps * (L %*% v)
u  <- u + dt * as.vector(du)
v  <- v + dt * as.vector(dv)
U[t+1,] <- u
V[t+1,] <- v
}
U[steps+1,]; V[steps+1,]
k   <- if (exists("g")) igraph::degree(g) else abs(diag(L))
ord <- order(-k, seq_along(k))
t_idx <- nrow(U)
df <- data.frame(
rank   = seq_along(ord),
node   = ord,
degree = k[ord],
u      = U[t_idx, ord]
)
ggplot(df, aes(rank, u)) +
geom_point(size = 2) +
labs(x = "Rank by degree (high → low)", y = "Activator density u(t)")
plot(seq_along(k), k[ord], type = "b", pch = 19,
xlab = "Rank (high → low)", ylab = "Degree")
